include ./common/_variables
include ./common/_mixins

doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    meta(http-equiv="X-UA-Compatible", content="ie=edge")
    title Portfolio | Welcome page
    link(rel="stylesheet", href="./assets/css/main.min.css")
    script(src='https://cdnjs.cloudflare.com/ajax/libs/gsap/1.20.3/TweenLite.min.js')
    script(src='http://threejs.org/build/three.min.js')
  body
    block content

    include ./components/modules/flipper

    script(src="./assets/js/bootloader.bundle.js")
    script(src='./assets/js/vendor.bundle.js')
    script(src="./assets/js/auth.bundle.js")

    script(id="vertexShader" type="x-shader/x-vertex").
      varying vec2 v_position;
      uniform vec2 u_size;
      uniform vec2 u_resolution;

      void main() {
        v_position = (position.xy+1.0)*0.5;
        gl_Position =  vec4(position, 1.0);
      }

    script#fragmentShader(type='x-shader/x-fragment').
      uniform float u_time;
      varying vec2 v_position;
      uniform sampler2D u_image;
      uniform sampler2D u_maps;
      uniform vec2 u_mouse;
      uniform float u_dpi;
      uniform vec2 u_resolution;
      vec2 pos(){
      return vec2(0.0,0.0);
      }
      vec4 blend(vec4 bg,vec4 fg){
      vec3 bgm=bg.rgb*bg.a;
      vec3 fgm=fg.rgb*fg.a;
      float ia=1.0-fg.a;
      float a=(fg.a + bg.a * ia);
      vec3 rgb;
      if(a!=0.0){
      rgb=(fgm + bgm * ia) / a;
      }else{
      rgb=vec3(0.0,0.0,0.0);
      }
      return vec4(rgb,a);
      }
      vec2 pixel(){
      return vec2(1.0*1.0)/u_resolution;
      }
      float wave(float x,float freq, float speed){
      return sin(x*freq+((u_time*(3.1415/2.0))*speed));
      }
      vec2 waves(vec2 pos){
      vec4 maps=texture2D(u_maps,pos);
      float mask=maps.r;
      float y=maps.g;
      float y2=pow(y,2.0);
      vec2 intensity=vec2(
      0.5-(y2*0.5),
      0.2+(y2*1.8)
      )*pixel();
      vec2 waves=vec2(
      wave(y,400.0-(y2*200.0),-0.03),
      wave(y,400.0-(y2*400.0*0.05),-0.045)
      +wave(y,900.0-(y2*900.0*0.05),-0.05)
      +wave(pos.x,20.0+(y2*20.0*1.5),-0.01)
      );
      return pos+(waves*intensity*mask);
      }
      vec2 depth(vec2 pos){
      vec2 intensity=vec2(0.01,0.01);
      float d=0.05-pow(texture2D(u_maps,pos).b,1.0);
      return pos+(intensity*u_mouse*d);
      }
      void main(){
      vec2 pos=v_position.xy;
      vec2 turbulence=depth(waves(pos));
      vec2 noTurbulence=depth(pos);
      vec4 c=texture2D(u_image,turbulence);
      gl_FragColor=vec4(c.rgb,1.0);
      }

    script.
      var container;
      var camera, scene, renderer;
      var uniforms;
      var mouse = {x:0, y:0};
      var loader = new THREE.TextureLoader();
      init();
      animate();
      function init() {
      container = document.getElementById( 'main-section' );
      camera = new THREE.Camera();
      //camera = new THREE.PerspectiveCamera(145, window.innerWidth / window.innerHeight, 1, 5000 );
      camera.position.z = 1;
      scene = new THREE.Scene();
      var geometry = new THREE.PlaneBufferGeometry( 2, 2 );
      var MyTexture = loader.load( "./assets/images/water.jpg" );
      var mapTexture = loader.load( "./assets/images/water-maps.jpg" );
      MyTexture.minFilter = THREE.LinearFilter;
      uniforms = {
      u_time: { type: "f", value: 1.0 },
      u_animation: { type: "f", value: 0.0 },
      u_mouse: { type: "v2", value: new THREE.Vector2() },
      u_resolution: { type: "v2", value: new THREE.Vector2() },
      u_size: {type:"v2", value: new THREE.Vector2(MyTexture.width,MyTexture.height) },
      u_image: {value:MyTexture },
      u_maps: {value:mapTexture}
      };
      var material = new THREE.ShaderMaterial( {
      uniforms: uniforms,
      vertexShader: document.getElementById( 'vertexShader' ).textContent,
      fragmentShader: document.getElementById( 'fragmentShader' ).textContent
      } );
      var mesh = new THREE.Mesh( geometry, material );
      scene.add( mesh );
      renderer = new THREE.WebGLRenderer();
      renderer.setPixelRatio( window.devicePixelRatio );
      container.appendChild( renderer.domElement );
      onWindowResize();
      window.addEventListener( 'resize', onWindowResize, false );
      }
      function onWindowResize( event ) {
      renderer.setSize( window.innerWidth, window.innerHeight );
      uniforms.u_resolution.value.x = renderer.domElement.width;
      uniforms.u_resolution.value.y = renderer.domElement.height;
      uniforms.u_mouse.value.x = mouse.x;
      uniforms.u_mouse.value.y = mouse.y;
      }
      function animate() {
      requestAnimationFrame( animate );
      render();
      }
      function render() {
      uniforms.u_time.value += 1.0;
      renderer.render( scene, camera );
      }
      document.addEventListener('mousemove',function(event){
      TweenLite.to(uniforms.u_mouse.value, 1, {
      x: ((event.pageX / window.innerWidth) - 0.5) * 1,
      y: ((event.pageY / window.innerHeight)- 0.5) * 1
      })
      })
